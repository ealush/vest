# Enforce
For assertions, Vest is bundled with [Enforce](https://npmjs.com/package/n4s). Enforce is a validation assertion library. It allows you to run your data against rules and conditions and test whether it passes your validations. It is intended for validation logic that gets repeated over and over again and should not be written manually. It comes with a wide variety of pre-built rules, but it can also be extended to support your own repeated custom logic.

The way Enforce operates is similar to most common assertion libraries. You pass it a value, and one or more rules to test your value against - if the validation fails, it throws an Error, otherwise - it will move on to the next rule in the chain.

```js
import { enforce } from 'vest'

enforce(4)
    .isNumber();
// passes

enforce(4)
    .isNumber()
    .greaterThan(2);
// passes

enforce(4)
    .lessThan(2) // throws an error, will not carry on to the next rule
    .greaterThan(3);
```

## Content
- [List of Enforce rules](#list-of-enforce-rules) - All default enforce rules
- [Custom Enforce Rules](#custom-enforce-rules) - How to extend enforce with your rules
- [Business Related Rules](#business-related-rules) - Using more rules such as isEmail and isCreditCard

Enforce exposes all predefined and custom rules. You may use chaining to make multiple enfocements for the same value.

{{LIST_OF_ENFORCE_RULES}}

# Custom enforce rules
To make it easier to reuse logic across your application, sometimes you would want to encapsulate bits of logic in rules that you can use later on, for example, "what's considered a valid email".

Your custom rules are essentially a single javascript object containing your rules.
```js
const myCustomRules = {
    isValidEmail: (value) => value.indexOf('@') > -1,
    hasKey: (value, {key}) => value.hasOwnProperty(key),
    passwordsMatch: (passConfirm, options) => passConfirm === options.passConfirm && options.passIsValid
}
```
Just like the predefined rules, your custom rules can accepts two parameters:
* `value` The actual value you are testing against.
* `args` (optional) the arguments which you pass on when running your tests.

You can extend enforce with your custom rules by creating a new instance of `Enforce` and adding the rules object as the argument.

```js
import { enforce } from 'vest';

const myCustomRules = {
    isValidEmail: (value) => value.indexOf('@') > -1,
    hasKey: (value, key) => value.hasOwnProperty(key),
    passwordsMatch: (passConfirm, options) => passConfirm === options.passConfirm && options.passIsValid
}

enforce.extend(myCustomRules);

enforce(user.email).isValidEmail();
```

# Business Related Rules

Along with the existing rules, you might need different business related rules, for email, phone number, credit card validations, and more.

Enforce uses [validator.js](https://github.com/validatorjs/validator.js) to provide some of these validations.

## Validator.js validations currently provided:

- isAlphanumeric
- isCreditCard
- isCurrency
- isEmail
- isIP
- isIdentityCard
- isJSON
- isLocale
- isMimeType
- isMobilePhone
- isPassportNumber
- isPostalCode
- isURL

Because these rules are business specific, and can have an impact on your bundle size, they are split into a their own bundle.

For example:

```js
import enforce from 'vest/enforceExtended';

enforce('example@gmail.com').isEmail();
```

Some of these rules also require locale arrays and objects. These are also exported by the extended entry point:

```js
import enforce, {
  isAlphanumericLocales,
  isMobilePhoneLocales,
  isPostalCodeLocales,
} from 'vest/enforceExtended';
```

To read the full documentation on these rules and the options they take, please visit [validator.js](https://github.com/validatorjs/validator.js).

### validator.js license:
```
Copyright (c) 2018 Chris O'Hara <cohara87@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
```
