// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`remove When suite exists Sanity - making sure everything works as it should 1`] = `
Object {
  "_canceled": Object {
    "3": true,
  },
  "_suites": Object {
    "suite_id": Array [
      Object {
        "doneCallbacks": Array [],
        "fieldCallbacks": Object {},
        "groups": Object {},
        "lagging": Array [
          VestTest {
            "asyncTest": Promise {},
            "failed": false,
            "fieldName": "field_1",
            "id": "0",
            "isWarning": false,
            "statement": undefined,
            "suiteId": "suite_id",
            "testFn": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
          },
          VestTest {
            "asyncTest": Promise {},
            "failed": false,
            "fieldName": "field_3",
            "id": "2",
            "isWarning": false,
            "statement": undefined,
            "suiteId": "suite_id",
            "testFn": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
          },
        ],
        "name": "suite_id",
        "pending": Array [
          VestTest {
            "asyncTest": Promise {},
            "failed": false,
            "fieldName": "field_2",
            "id": "5",
            "isWarning": false,
            "statement": undefined,
            "suiteId": "suite_id",
            "testFn": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
          },
          VestTest {
            "asyncTest": Promise {},
            "failed": false,
            "fieldName": "field_4",
            "id": "7",
            "isWarning": false,
            "statement": undefined,
            "suiteId": "suite_id",
            "testFn": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
          },
        ],
        "suiteId": "suite_id",
        "testObjects": Array [
          VestTest {
            "asyncTest": Promise {},
            "failed": false,
            "fieldName": "field_2",
            "id": "5",
            "isWarning": false,
            "statement": undefined,
            "suiteId": "suite_id",
            "testFn": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
          },
          VestTest {
            "asyncTest": Promise {},
            "failed": false,
            "fieldName": "field_4",
            "id": "7",
            "isWarning": false,
            "statement": undefined,
            "suiteId": "suite_id",
            "testFn": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
          },
          VestTest {
            "asyncTest": Promise {},
            "failed": false,
            "fieldName": "field_1",
            "id": "0",
            "isWarning": false,
            "statement": undefined,
            "suiteId": "suite_id",
            "testFn": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
          },
          VestTest {
            "asyncTest": Promise {},
            "failed": false,
            "fieldName": "field_3",
            "id": "2",
            "isWarning": false,
            "statement": undefined,
            "suiteId": "suite_id",
            "testFn": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
          },
        ],
        "tests": Object {},
      },
      Object {
        "doneCallbacks": Array [],
        "fieldCallbacks": Object {},
        "groups": Object {},
        "lagging": null,
        "name": "suite_id",
        "pending": null,
        "suiteId": "suite_id",
        "testObjects": Array [
          VestTest {
            "asyncTest": Promise {},
            "failed": false,
            "fieldName": "field_1",
            "id": "0",
            "isWarning": false,
            "statement": undefined,
            "suiteId": "suite_id",
            "testFn": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
          },
          VestTest {
            "asyncTest": Promise {},
            "failed": false,
            "fieldName": "field_3",
            "id": "2",
            "isWarning": false,
            "statement": undefined,
            "suiteId": "suite_id",
            "testFn": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
          },
          VestTest {
            "asyncTest": Promise {},
            "failed": false,
            "fieldName": "field_4",
            "id": "3",
            "isWarning": false,
            "statement": undefined,
            "suiteId": "suite_id",
            "testFn": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
          },
        ],
        "tests": Object {},
      },
    ],
  },
}
`;
