// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`module: skipped export: mergeExcludedTests When previous state exists When no currently skipped fields or groups When skipped field exists in previous state Error field Should copy prev field state over 1`] = `
Object {
  "doneCallbacks": Array [],
  "fieldCallbacks": Object {},
  "groups": Object {
    "group_1": Object {},
  },
  "lagging": Array [],
  "name": "suite_1",
  "pending": Array [],
  "suiteId": "suite_1",
  "testObjects": Array [
    VestTest {
      "failed": true,
      "fieldName": "field_1",
      "id": "6",
      "isWarning": true,
      "statement": "warning message",
      "suiteId": "suite_1",
      "testFn": [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "throw",
            "value": [Error],
          },
        ],
      },
    },
    VestTest {
      "failed": true,
      "fieldName": "field_2",
      "groupName": "group_1",
      "id": "5",
      "isWarning": false,
      "statement": "error message",
      "suiteId": "suite_1",
      "testFn": [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "throw",
            "value": [Error],
          },
        ],
      },
    },
  ],
  "tests": Object {},
}
`;

exports[`module: skipped export: mergeExcludedTests When previous state exists When no currently skipped fields or groups When skipped field exists in previous state Warning field Should copy prev field state over 1`] = `
Object {
  "doneCallbacks": Array [],
  "fieldCallbacks": Object {},
  "groups": Object {
    "group_1": Object {},
  },
  "lagging": Array [],
  "name": "suite_1",
  "pending": Array [],
  "suiteId": "suite_1",
  "testObjects": Array [
    VestTest {
      "failed": true,
      "fieldName": "field_2",
      "groupName": "group_1",
      "id": "3",
      "isWarning": false,
      "statement": "error message",
      "suiteId": "suite_1",
      "testFn": [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "throw",
            "value": [Error],
          },
        ],
      },
    },
    VestTest {
      "failed": true,
      "fieldName": "field_1",
      "id": "0",
      "isWarning": true,
      "statement": "warning message",
      "suiteId": "suite_1",
      "testFn": [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "throw",
            "value": [Error],
          },
        ],
      },
    },
  ],
  "tests": Object {},
}
`;

exports[`module: skipped export: mergeExcludedTests When previous state exists When skipped group exists in previous state Skipping after initial run: Should copy group state over 1`] = `
Object {
  "done": [Function],
  "errorCount": 6,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {
    "group_1": Object {
      "f1": Object {
        "errorCount": 1,
        "errors": Array [
          "f1_group_1_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f2": Object {
        "errorCount": 0,
        "testCount": 1,
        "warnCount": 1,
        "warnings": Array [
          "f2_group_1_msg",
        ],
      },
      "f3": Object {
        "errorCount": 1,
        "errors": Array [
          "f3_group_1_msg",
        ],
        "testCount": 2,
        "warnCount": 0,
      },
      "f4": Object {
        "errorCount": 1,
        "errors": Array [
          "f4_group_1_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f5": Object {
        "errorCount": 0,
        "testCount": 1,
        "warnCount": 0,
      },
    },
  },
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "name": "suite_1",
  "testCount": 10,
  "tests": Object {
    "f1": Object {
      "errorCount": 2,
      "errors": Array [
        "f1_msg",
        "f1_group_1_msg",
      ],
      "testCount": 2,
      "warnCount": 0,
    },
    "f2": Object {
      "errorCount": 1,
      "errors": Array [
        "f2_msg",
      ],
      "testCount": 2,
      "warnCount": 1,
      "warnings": Array [
        "f2_group_1_msg",
      ],
    },
    "f3": Object {
      "errorCount": 2,
      "errors": Array [
        "f3_msg",
        "f3_group_1_msg",
      ],
      "testCount": 4,
      "warnCount": 0,
    },
    "f4": Object {
      "errorCount": 1,
      "errors": Array [
        "f4_group_1_msg",
      ],
      "testCount": 1,
      "warnCount": 0,
    },
    "f5": Object {
      "errorCount": 0,
      "testCount": 1,
      "warnCount": 0,
    },
  },
  "warnCount": 1,
}
`;

exports[`module: skipped export: mergeExcludedTests When previous state exists When skipped group exists in previous state Skipping after second run: Should copy group state over 1`] = `
Object {
  "done": [Function],
  "errorCount": 9,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {
    "group_1": Object {
      "f1": Object {
        "errorCount": 1,
        "errors": Array [
          "f1_group_1_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f2": Object {
        "errorCount": 0,
        "testCount": 1,
        "warnCount": 1,
        "warnings": Array [
          "f2_group_1_msg",
        ],
      },
      "f3": Object {
        "errorCount": 1,
        "errors": Array [
          "f3_group_1_msg",
        ],
        "testCount": 2,
        "warnCount": 0,
      },
      "f4": Object {
        "errorCount": 1,
        "errors": Array [
          "f4_group_1_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f5": Object {
        "errorCount": 0,
        "testCount": 1,
        "warnCount": 0,
      },
    },
    "group_2": Object {
      "f1": Object {
        "errorCount": 1,
        "errors": Array [
          "f1_group_2_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f3": Object {
        "errorCount": 0,
        "testCount": 1,
        "warnCount": 0,
      },
      "f4": Object {
        "errorCount": 1,
        "errors": Array [
          "f4_group_2_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f5": Object {
        "errorCount": 1,
        "errors": Array [
          "f5_group_2_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f6": Object {
        "errorCount": 0,
        "testCount": 1,
        "warnCount": 1,
        "warnings": Array [
          "f6_group_2_msg",
        ],
      },
      "f7": Object {
        "errorCount": 0,
        "testCount": 1,
        "warnCount": 0,
      },
    },
  },
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "name": "suite_1",
  "testCount": 16,
  "tests": Object {
    "f1": Object {
      "errorCount": 3,
      "errors": Array [
        "f1_msg",
        "f1_group_2_msg",
        "f1_group_1_msg",
      ],
      "testCount": 3,
      "warnCount": 0,
    },
    "f2": Object {
      "errorCount": 1,
      "errors": Array [
        "f2_msg",
      ],
      "testCount": 2,
      "warnCount": 1,
      "warnings": Array [
        "f2_group_1_msg",
      ],
    },
    "f3": Object {
      "errorCount": 2,
      "errors": Array [
        "f3_msg",
        "f3_group_1_msg",
      ],
      "testCount": 5,
      "warnCount": 0,
    },
    "f4": Object {
      "errorCount": 2,
      "errors": Array [
        "f4_group_2_msg",
        "f4_group_1_msg",
      ],
      "testCount": 2,
      "warnCount": 0,
    },
    "f5": Object {
      "errorCount": 1,
      "errors": Array [
        "f5_group_2_msg",
      ],
      "testCount": 2,
      "warnCount": 0,
    },
    "f6": Object {
      "errorCount": 0,
      "testCount": 1,
      "warnCount": 1,
      "warnings": Array [
        "f6_group_2_msg",
      ],
    },
    "f7": Object {
      "errorCount": 0,
      "testCount": 1,
      "warnCount": 0,
    },
  },
  "warnCount": 2,
}
`;

exports[`module: skipped export: mergeExcludedTests When previous state exists When skipped group exists in previous state Skipping after second run: Should copy group state over 2`] = `
Object {
  "done": [Function],
  "errorCount": 12,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {
    "group_1": Object {
      "f1": Object {
        "errorCount": 1,
        "errors": Array [
          "f1_group_1_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f2": Object {
        "errorCount": 0,
        "testCount": 1,
        "warnCount": 1,
        "warnings": Array [
          "f2_group_1_msg",
        ],
      },
      "f3": Object {
        "errorCount": 2,
        "errors": Array [
          "f3_group_1_msg",
          "f3_async_group_1_msg",
        ],
        "testCount": 2,
        "warnCount": 0,
      },
      "f4": Object {
        "errorCount": 1,
        "errors": Array [
          "f4_group_1_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f5": Object {
        "errorCount": 0,
        "testCount": 1,
        "warnCount": 0,
      },
    },
    "group_2": Object {
      "f1": Object {
        "errorCount": 1,
        "errors": Array [
          "f1_group_2_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f3": Object {
        "errorCount": 1,
        "errors": Array [
          "f3_async_group_2_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f4": Object {
        "errorCount": 1,
        "errors": Array [
          "f4_group_2_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f5": Object {
        "errorCount": 1,
        "errors": Array [
          "f5_group_2_msg",
        ],
        "testCount": 1,
        "warnCount": 0,
      },
      "f6": Object {
        "errorCount": 0,
        "testCount": 1,
        "warnCount": 1,
        "warnings": Array [
          "f6_group_2_msg",
        ],
      },
      "f7": Object {
        "errorCount": 0,
        "testCount": 1,
        "warnCount": 0,
      },
    },
  },
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "name": "suite_1",
  "testCount": 16,
  "tests": Object {
    "f1": Object {
      "errorCount": 3,
      "errors": Array [
        "f1_msg",
        "f1_group_2_msg",
        "f1_group_1_msg",
      ],
      "testCount": 3,
      "warnCount": 0,
    },
    "f2": Object {
      "errorCount": 1,
      "errors": Array [
        "f2_msg",
      ],
      "testCount": 2,
      "warnCount": 1,
      "warnings": Array [
        "f2_group_1_msg",
      ],
    },
    "f3": Object {
      "errorCount": 5,
      "errors": Array [
        "f3_msg",
        "f3_async_msg",
        "f3_async_group_2_msg",
        "f3_group_1_msg",
        "f3_async_group_1_msg",
      ],
      "testCount": 5,
      "warnCount": 0,
    },
    "f4": Object {
      "errorCount": 2,
      "errors": Array [
        "f4_group_2_msg",
        "f4_group_1_msg",
      ],
      "testCount": 2,
      "warnCount": 0,
    },
    "f5": Object {
      "errorCount": 1,
      "errors": Array [
        "f5_group_2_msg",
      ],
      "testCount": 2,
      "warnCount": 0,
    },
    "f6": Object {
      "errorCount": 0,
      "testCount": 1,
      "warnCount": 1,
      "warnings": Array [
        "f6_group_2_msg",
      ],
    },
    "f7": Object {
      "errorCount": 0,
      "testCount": 1,
      "warnCount": 0,
    },
  },
  "warnCount": 2,
}
`;

exports[`module: skipped export: mergeExcludedTests When previous state exists When skipped group exists in previous state sanity: skipped tests are not in initial state 1`] = `
Object {
  "done": [Function],
  "errorCount": 3,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "name": "suite_1",
  "testCount": 4,
  "tests": Object {
    "f1": Object {
      "errorCount": 1,
      "errors": Array [
        "f1_msg",
      ],
      "testCount": 1,
      "warnCount": 0,
    },
    "f2": Object {
      "errorCount": 1,
      "errors": Array [
        "f2_msg",
      ],
      "testCount": 1,
      "warnCount": 0,
    },
    "f3": Object {
      "errorCount": 1,
      "errors": Array [
        "f3_msg",
      ],
      "testCount": 2,
      "warnCount": 0,
    },
  },
  "warnCount": 0,
}
`;
