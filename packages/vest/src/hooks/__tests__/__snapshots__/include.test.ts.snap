// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`include Field is excluded via \`skip\` Should disregard \`include.when\` and avoid running the test 1`] = `
Object {
  "done": [Function],
  "errorCount": 1,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 1,
  "tests": Object {
    "field_1": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include Field is excluded via \`skip\` Should disregard \`include\` and avoid running the test 1`] = `
Object {
  "done": [Function],
  "errorCount": 1,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 1,
  "tests": Object {
    "field_1": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include Test is excluded by being out of an included group Should disregard \`include\` and avoid running the test 1`] = `
Object {
  "done": [Function],
  "errorCount": 0,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {
    "g2": Object {
      "field_1": Object {
        "errorCount": 0,
        "errors": Array [],
        "testCount": 0,
        "warnCount": 0,
        "warnings": Array [],
      },
    },
  },
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 0,
  "tests": Object {
    "field_1": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include Test is excluded via \`skip.group\` Should disregard \`include.when\` and avoid running the test 1`] = `
Object {
  "done": [Function],
  "errorCount": 1,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {
    "g1": Object {
      "field_1": Object {
        "errorCount": 0,
        "errors": Array [],
        "testCount": 0,
        "warnCount": 0,
        "warnings": Array [],
      },
      "field_2": Object {
        "errorCount": 0,
        "errors": Array [],
        "testCount": 0,
        "warnCount": 0,
        "warnings": Array [],
      },
    },
  },
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 1,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include Test is excluded via \`skip.group\` Should disregard \`include\` and avoid running the test 1`] = `
Object {
  "done": [Function],
  "errorCount": 1,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {
    "g1": Object {
      "field_1": Object {
        "errorCount": 0,
        "errors": Array [],
        "testCount": 0,
        "warnCount": 0,
        "warnings": Array [],
      },
      "field_2": Object {
        "errorCount": 0,
        "errors": Array [],
        "testCount": 0,
        "warnCount": 0,
        "warnings": Array [],
      },
    },
  },
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 1,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include Test is excluded via \`skipWhen\` Should disregard \`include.when\` and avoid running the matching tests 1`] = `
Object {
  "done": [Function],
  "errorCount": 1,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 1,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include Test is excluded via \`skipWhen\` Should disregard \`include\` and avoid running the matching tests 1`] = `
Object {
  "done": [Function],
  "errorCount": 1,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 1,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include There is an \`onlyd\` field \`include\` is run as-is without modifiers Should run the included test along with the onlyd test 1`] = `
Object {
  "done": [Function],
  "errorCount": 2,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 2,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include There is an \`onlyd\` field include().when() \`when\` param is a boolean when \`false\` Should skip run included field 1`] = `
Object {
  "done": [Function],
  "errorCount": 1,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 1,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_3": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include There is an \`onlyd\` field include().when() \`when\` param is a boolean when \`true\` Should run included field 1`] = `
Object {
  "done": [Function],
  "errorCount": 2,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 2,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_3": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include There is an \`onlyd\` field include().when() \`when\` param is a function Callback evaluation Should evaluate per test run 1`] = `
Object {
  "done": [Function],
  "errorCount": 2,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 2,
  "tests": Object {
    "field_1": Object {
      "errorCount": 2,
      "errors": Array [],
      "testCount": 2,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include There is an \`onlyd\` field include().when() \`when\` param is a function when  returning\`false\` Should skip run included field 1`] = `
Object {
  "done": [Function],
  "errorCount": 1,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 1,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_3": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include There is an \`onlyd\` field include().when() \`when\` param is a function when returning \`true\` Should run included field 1`] = `
Object {
  "done": [Function],
  "errorCount": 2,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 2,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_3": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include There is an \`onlyd\` field include().when() \`when\` param is a string \`when\` param is a name of a non-included field Should avoid running the included field 1`] = `
Object {
  "done": [Function],
  "errorCount": 1,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 1,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_3": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include There is an \`onlyd\` field include().when() \`when\` param is a string \`when\` param is a name of a skipped field Should avoid running the included field 1`] = `
Object {
  "done": [Function],
  "errorCount": 1,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 1,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_3": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include There is an \`onlyd\` field include().when() \`when\` param is a string \`when\` param is a name of an onlyd field Should run included field along with the onlyd field 1`] = `
Object {
  "done": [Function],
  "errorCount": 2,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 2,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_3": Object {
      "errorCount": 0,
      "errors": Array [],
      "testCount": 0,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include When no \`skip\` or \`only\` include has no effect 1`] = `
Object {
  "done": [Function],
  "errorCount": 2,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 2,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;

exports[`include When no \`skip\` or \`only\` include().when has no effect 1`] = `
Object {
  "done": [Function],
  "errorCount": 2,
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": Object {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isValid": [Function],
  "suiteName": undefined,
  "testCount": 2,
  "tests": Object {
    "field_1": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
    "field_2": Object {
      "errorCount": 1,
      "errors": Array [],
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": Array [],
    },
  },
  "valid": false,
  "warnCount": 0,
}
`;
