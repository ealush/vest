// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`omitWhen When conditional is falsy boolean conditional Should have all tests within the omit block referenced in the result 1`] = `
{
  "field_1": {
    "errorCount": 1,
    "errors": [],
    "pendingCount": 0,
    "testCount": 2,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_2": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_3": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_4": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
}
`;

exports[`omitWhen When conditional is falsy boolean conditional Should run tests normally 1`] = `
{
  "field_1": {
    "errorCount": 1,
    "errors": [],
    "pendingCount": 0,
    "testCount": 2,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_2": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_3": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_4": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
}
`;

exports[`omitWhen When conditional is falsy boolean conditional Should run tests normally 2`] = `
{
  "field_1": {
    "errorCount": 1,
    "errors": [],
    "pendingCount": 0,
    "testCount": 2,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_2": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_3": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_4": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 1,
    "valid": true,
    "warnCount": 0,
    "warnings": [],
  },
}
`;

exports[`omitWhen When conditional is falsy function conditional Should have all tests within the omit block referenced in the result 1`] = `
{
  "field_1": {
    "errorCount": 1,
    "errors": [],
    "pendingCount": 0,
    "testCount": 2,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_2": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_3": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_4": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
}
`;

exports[`omitWhen When conditional is falsy function conditional Should run tests normally 1`] = `
{
  "field_1": {
    "errorCount": 1,
    "errors": [],
    "pendingCount": 0,
    "testCount": 2,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_2": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_3": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_4": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
}
`;

exports[`omitWhen When conditional is falsy function conditional Should run tests normally 2`] = `
{
  "field_1": {
    "errorCount": 1,
    "errors": [],
    "pendingCount": 0,
    "testCount": 2,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_2": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_3": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 0,
    "valid": false,
    "warnCount": 0,
    "warnings": [],
  },
  "field_4": SummaryBase {
    "errorCount": 0,
    "errors": [],
    "pendingCount": 0,
    "testCount": 1,
    "valid": true,
    "warnCount": 0,
    "warnings": [],
  },
}
`;

exports[`omitWhen When conditional is truthy boolean conditional Should avoid running the omitted tests 1`] = `
SuiteSummary {
  "errorCount": 1,
  "errors": [
    SummaryFailure {
      "fieldName": "field_2",
      "groupName": undefined,
      "message": undefined,
    },
  ],
  "getError": [Function],
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarning": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isPending": [Function],
  "isValid": [Function],
  "isValidByGroup": [Function],
  "pendingCount": 0,
  "suiteName": undefined,
  "testCount": 2,
  "tests": {
    "field_1": {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 1,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
    "field_2": SummaryBase {
      "errorCount": 1,
      "errors": [],
      "pendingCount": 0,
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": [],
    },
    "field_3": SummaryBase {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 0,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
    "field_4": SummaryBase {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 0,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
  },
  "valid": false,
  "warnCount": 0,
  "warnings": [],
}
`;

exports[`omitWhen When conditional is truthy boolean conditional Should skip and not run omitted fields when no filter provided 1`] = `
SuiteSummary {
  "errorCount": 1,
  "errors": [
    SummaryFailure {
      "fieldName": "field_2",
      "groupName": undefined,
      "message": undefined,
    },
  ],
  "getError": [Function],
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarning": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isPending": [Function],
  "isValid": [Function],
  "isValidByGroup": [Function],
  "pendingCount": 0,
  "suiteName": undefined,
  "testCount": 2,
  "tests": {
    "field_1": {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 1,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
    "field_2": SummaryBase {
      "errorCount": 1,
      "errors": [],
      "pendingCount": 0,
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": [],
    },
    "field_3": SummaryBase {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 0,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
    "field_4": SummaryBase {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 0,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
  },
  "valid": false,
  "warnCount": 0,
  "warnings": [],
}
`;

exports[`omitWhen When conditional is truthy function conditional Should avoid running the omitted tests 1`] = `
SuiteSummary {
  "errorCount": 1,
  "errors": [
    SummaryFailure {
      "fieldName": "field_2",
      "groupName": undefined,
      "message": undefined,
    },
  ],
  "getError": [Function],
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarning": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isPending": [Function],
  "isValid": [Function],
  "isValidByGroup": [Function],
  "pendingCount": 0,
  "suiteName": undefined,
  "testCount": 2,
  "tests": {
    "field_1": {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 1,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
    "field_2": SummaryBase {
      "errorCount": 1,
      "errors": [],
      "pendingCount": 0,
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": [],
    },
    "field_3": SummaryBase {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 0,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
    "field_4": SummaryBase {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 0,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
  },
  "valid": false,
  "warnCount": 0,
  "warnings": [],
}
`;

exports[`omitWhen When conditional is truthy function conditional Should skip and not run omitted fields when no filter provided 1`] = `
SuiteSummary {
  "errorCount": 1,
  "errors": [
    SummaryFailure {
      "fieldName": "field_2",
      "groupName": undefined,
      "message": undefined,
    },
  ],
  "getError": [Function],
  "getErrors": [Function],
  "getErrorsByGroup": [Function],
  "getWarning": [Function],
  "getWarnings": [Function],
  "getWarningsByGroup": [Function],
  "groups": {},
  "hasErrors": [Function],
  "hasErrorsByGroup": [Function],
  "hasWarnings": [Function],
  "hasWarningsByGroup": [Function],
  "isPending": [Function],
  "isValid": [Function],
  "isValidByGroup": [Function],
  "pendingCount": 0,
  "suiteName": undefined,
  "testCount": 2,
  "tests": {
    "field_1": {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 1,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
    "field_2": SummaryBase {
      "errorCount": 1,
      "errors": [],
      "pendingCount": 0,
      "testCount": 1,
      "valid": false,
      "warnCount": 0,
      "warnings": [],
    },
    "field_3": SummaryBase {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 0,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
    "field_4": SummaryBase {
      "errorCount": 0,
      "errors": [],
      "pendingCount": 0,
      "testCount": 0,
      "valid": true,
      "warnCount": 0,
      "warnings": [],
    },
  },
  "valid": false,
  "warnCount": 0,
  "warnings": [],
}
`;
